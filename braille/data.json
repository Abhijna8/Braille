{
    "C": {
        "Introduction": {
            "What is C?": {
                "description": "C is a general-purpose programming language created by Dennis Ritchie at the Bell Laboratories in 1972.\r\n\r\nIt is a very popular language, despite being old. The main reason for its popularity is because it is a fundamental language in the field of computer science.\r\n\r\nC is strongly associated with UNIX, as it was developed to write the UNIX operating system."
            },
            "Why Learn C?": {
                "description": "1)It is one of the most popular programming languages in the world\r\n2)If you know C, you will have no problem learning other popular programming languages such as Java, Python, C++, C#, etc, as the syntax is similar\r\n3)C is very fast, compared to other programming languages, like Java and Python\r\n4)C is very versatile; it can be used in both applications and technologies\r\n"
            },
            "Syntax": {
                "description": "#include <stdio.h>\r\n\r\nint main() {\r\n  printf(\"Hello World!\");\r\n  return 0;\r\n}\r\n\r\nExample explained\r\nLine 1: #include <stdio.h> is a header file library that lets us work with input and output functions, such as printf() (used in line 4). Header files add functionality to C programs.\r\n\r\nLine 2: A blank line. C ignores white space. But we use it to make the code more readable.\r\n\r\nLine 3: Another thing that always appear in a C program is main(). This is called a function. Any code inside its curly brackets {} will be executed.\r\n\r\nLine 4: printf() is a function used to output\/print text to the screen. In our example, it will output \"Hello World!\".\r\n\r\n\r\nNote that: Every C statement ends with a semicolon ;\r\n\r\nNote: The body of int main() could also been written as:\r\nint main(){printf(\"Hello World!\");return 0;}\r\n\r\nRemember: The compiler ignores white spaces. However, multiple lines makes the code more readable.\r\n\r\nLine 5: return 0 ends the main() function.\r\n\r\nLine 6: Do not forget to add the closing curly bracket } to actually end the main function."
            },
            "Output (Print Text)": {
                "description": "Output (Print Text)\r\nTo output values or print text in C, you can use the printf() function:\r\n\r\n#include <stdio.h>\r\n\r\nint main() {\r\n  printf(\"Hello World!\");\r\n  return 0;\r\n}\r\n\r\nDouble Quotes\r\nWhen you are working with text, it must be wrapped inside double quotations marks \"\".\r\n\r\nIf you forget the double quotes, an error occurs:\r\n\r\nExample\r\nprintf(\"This sentence will work!\");\r\nprintf(This sentence will produce an error.);"
            },
            "New Lines": {
                "description": "New Lines\r\nTo insert a new line, you can use the \\n character:\r\n\r\nExample\r\n#include <stdio.h>\r\n\r\nint main() {\r\n  printf(\"Hello World!\\n\");\r\n  printf(\"I am learning C.\");\r\n  return 0;\r\n}\r\nYou can also output multiple lines with a single printf() function. However, this could make the code harder to read:\r\n\r\nExample\r\n#include <stdio.h>\r\n\r\nint main() {\r\n  printf(\"Hello World!\\nI am learning C.\\nAnd it is awesome!\");\r\n  return 0;\r\n}\r\n\r\nWhat is \\n exactly?\r\nThe newline character (\\n) is called an escape sequence, and it forces the cursor to change its position to the beginning of the next line on the screen. This results in a new line.\r\n\r\nExamples of other valid escape sequences are:\r\n\r\nEscape Sequence\tDescription\r\n\\t\t - Creates a horizontal tab\t\r\n\\\\\t - Inserts a backslash character (\\)\t\r\n\\\"\t - Inserts a double quote character"
            },
            "Comments": {
                "description": "Comments in C\r\nComments can be used to explain code, and to make it more readable. It can also be used to prevent execution when testing alternative code.\r\n\r\nComments can be singled-lined or multi-lined.\r\n\r\nSingle-line Comments\r\nSingle-line comments start with two forward slashes (\/\/).\r\n\r\nAny text between \/\/ and the end of the line is ignored by the compiler (will not be executed).\r\n\r\nThis example uses a single-line comment before a line of code:\r\nExample\r\n\/\/ This is a comment\r\nprintf(\"Hello World!\");\r\n\r\n\r\n\r\nC Multi-line Comments\r\nMulti-line comments start with \/* and ends with *\/.\r\n\r\nAny text between \/* and *\/ will be ignored by the compiler:\r\n\r\nExample\r\n\/* The code below will print the words Hello World!\r\nto the screen, and it is amazing *\/\r\nprintf(\"Hello World!\");"
            }
        },
        "Variables": {
            "Introduction": {
                "description": "Variables are containers for storing data values, like numbers and characters.\r\n\r\nIn C, there are different types of variables (defined with different keywords), for example:\r\n\r\nint - stores integers (whole numbers), without decimals, such as 123 or -123\r\nfloat - stores floating point numbers, with decimals, such as 19.99 or -19.99\r\nchar - stores single characters, such as 'a' or 'B'. Characters are surrounded by single quotes"
            },
            "Declaring (Creating) Variables": {
                "description": "To create a variable, specify the type and assign it a value:\r\n\r\nSyntax\r\ntype variableName = value;\r\nWhere type is one of C types (such as int), and variableName is the name of the variable (such as x or myName). The equal sign is used to assign a value to the variable.\r\n\r\nSo, to create a variable that should store a number, look at the following example:\r\n\r\nExample\r\nCreate a variable called myNum of type int and assign the value 15 to it:\r\n\r\nint myNum = 15;\r\nYou can also declare a variable without assigning the value, and assign the value later:\r\n\r\nExample\r\n\/\/ Declare a variable\r\nint myNum;\r\n\r\n\/\/ Assign a value to the variable\r\nmyNum = 15;\r\nOutput Variables\r\nYou learned from the output chapter that you can output values\/print text with the printf() function:\r\n\r\nExample\r\nprintf(\"Hello World!\");\r\nIn many other programming languages (like Python, Java, and C++), you would normally use a print function to display the value of a variable. However, this is not possible in C:\r\n\r\nExample\r\nint myNum = 15;\r\nprintf(myNum);  \/\/ Nothing happens"
            },
            "Format Specifiers": {
                "description": "Format Specifiers\r\nFormat specifiers are used together with the printf() function to tell the compiler what type of data the variable is storing. It is basically a placeholder for the variable value.\r\n\r\nA format specifier starts with a percentage sign %, followed by a character.\r\n\r\nFor example, to output the value of an int variable, use the format specifier %d surrounded by double quotes (\"\"), inside the printf() function:\r\n\r\nExample\r\nint myNum = 15;\r\nprintf(\"%d\", myNum);  \/\/ Outputs 15\r\nTo print other types, use %c for char and %f for float:\r\n\r\nExample\r\n\/\/ Create variables\r\nint myNum = 15;            \/\/ Integer (whole number)\r\nfloat myFloatNum = 5.99;   \/\/ Floating point number\r\nchar myLetter = 'D';       \/\/ Character\r\n\r\n\/\/ Print variables\r\nprintf(\"%d\\n\", myNum);\r\nprintf(\"%f\\n\", myFloatNum);\r\nprintf(\"%c\\n\", myLetter);\r\nTo combine both text and a variable, separate them with a comma inside the printf() function:\r\n\r\nExample\r\nint myNum = 15;\r\nprintf(\"My favorite number is: %d\", myNum);\r\nTo print different types in a single printf() function, you can use the following:\r\n\r\nExample\r\nint myNum = 15;\r\nchar myLetter = 'D';\r\nprintf(\"My number is %d and my letter is %c\", myNum, myLetter);\r\nYou will learn more about Data Types in a later chapter.\r\n\r\nPrint Values Without Variables\r\nYou can also just print a value without storing it in a variable, as long as you use the correct format specifier:\r\n\r\nExample\r\nprintf(\"My favorite number is: %d\", 15);\r\nprintf(\"My favorite letter is: %c\", 'D');"
            },
            "Variable Values": {
                "description": "Change Variable Values\r\nIf you assign a new value to an existing variable, it will overwrite the previous value:\r\n\r\nExample\r\nint myNum = 15;  \/\/ myNum is 15\r\nmyNum = 10;  \/\/ Now myNum is 10\r\nYou can also assign the value of one variable to another:\r\n\r\nExample\r\nint myNum = 15;\r\n\r\nint myOtherNum = 23;\r\n\r\n\/\/ Assign the value of myOtherNum (23) to myNum\r\nmyNum = myOtherNum;\r\n\r\n\/\/ myNum is now 23, instead of 15\r\nprintf(\"%d\", myNum);\r\nOr copy values to empty variables:\r\n\r\nExample\r\n\/\/ Create a variable and assign the value 15 to it\r\nint myNum = 15;\r\n\r\n\/\/ Declare a variable without assigning it a value\r\nint myOtherNum;\r\n\r\n\/\/ Assign the value of myNum to myOtherNum\r\nmyOtherNum = myNum;\r\n\r\n\/\/ myOtherNum now has 15 as a value\r\nprintf(\"%d\", myOtherNum);\r\nAdd Variables Together\r\nTo add a variable to another variable, you can use the + operator:\r\n\r\nExample\r\nint x = 5;\r\nint y = 6;\r\nint sum = x + y;\r\nprintf(\"%d\", sum);"
            },
            "Declare Multiple Variables": {
                "description": "Declare Multiple Variables\r\nTo declare more than one variable of the same type, use a comma-separated list:\r\n\r\nExample\r\nint x = 5, y = 6, z = 50;\r\nprintf(\"%d\", x + y + z);\r\nYou can also assign the same value to multiple variables of the same type:\r\n\r\nExample\r\nint x, y, z;\r\nx = y = z = 50;\r\nprintf(\"%d\", x + y + z);"
            },
            "Variable Names (Identifiers)": {
                "description": "C Variable Names\r\nAll C variables must be identified with unique names.\r\n\r\nThese unique names are called identifiers.\r\n\r\nIdentifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).\r\n\r\nNote: It is recommended to use descriptive names in order to create understandable and maintainable code:\r\n\r\nExample\r\n\/\/ Good variable name\r\nint minutesPerHour = 60;\r\n\r\n\/\/ OK, but not so easy to understand what m actually is\r\nint m = 60;\r\nThe general rules for naming variables are:\r\n\r\nNames can contain letters, digits and underscores\r\nNames must begin with a letter or an underscore (_)\r\nNames are case-sensitive (myVar and myvar are different variables)\r\nNames cannot contain whitespaces or special characters like !, #, %, etc.\r\nReserved words (such as int) cannot be used as names"
            }
        },
        "Data Types": {
            "Introduction": {
                "description": "Data Types\r\nAs explained in the Variables chapter, a variable in C must be a specified data type, and you must use a format specifier inside the printf() function to display it:\r\n\r\nExample\r\n\/\/ Create variables\r\nint myNum = 5;             \/\/ Integer (whole number)\r\nfloat myFloatNum = 5.99;   \/\/ Floating point number\r\nchar myLetter = 'D';       \/\/ Character\r\n\r\n\/\/ Print variables\r\nprintf(\"%d\\n\", myNum);\r\nprintf(\"%f\\n\", myFloatNum);\r\nprintf(\"%c\\n\", myLetter);\r\nBasic Data Types\r\nThe data type specifies the size and type of information the variable will store.\r\n\r\nData Type\tSize\tDescription\tExample\r\nint\t- 2 or 4 bytes\t- Stores whole numbers, without decimals\t- 1\r\nfloat -\t4 bytes\t- Stores fractional numbers, containing one or more decimals. Sufficient for storing 6-7 decimal digits - 1.99\r\ndouble\t- 8 bytes\t - Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits - 1.99\r\nchar\t- 1 byte\t- Stores a single character\/letter\/number, or ASCII values\t- 'A'\r\n\r\nBasic Format Specifiers\r\nThere are different format specifiers for each data type. Here are some of them:\r\n\r\nFormat Specifier\tData Type\t\r\n%d or %i\tint\t\r\n%f or %F\tfloat\t\r\n%lf\tdouble\t\r\n%c\tchar\t\r\n%s\tUsed for strings (text)"
            },
            "Character Data Types": {
                "description": "The char Type\r\nThe char data type is used to store a single character.\r\n\r\nThe character must be surrounded by single quotes, like 'A' or 'c', and we use the %c format specifier to print it:\r\n\r\nExample\r\nchar myGrade = 'A';\r\nprintf(\"%c\", myGrade);\r\nAlternatively, if you are familiar with ASCII, you can use ASCII values to display certain characters. Note that these values are not surrounded by quotes (''), as they are numbers:\r\n\r\nExample\r\nchar a = 65, b = 66, c = 67;\r\nprintf(\"%c\", a);\r\nprintf(\"%c\", b);\r\nprintf(\"%c\", c);\r\nTip: A list of all ASCII values can be found in our ASCII Table Reference.\r\n\r\nNotes on Characters\r\nIf you try to store more than a single character, it will only print the last character:\r\n\r\nExample\r\nchar myText = 'Hello';\r\nprintf(\"%c\", myText);\r\nNote: Don't use the char type for storing multiple characters, as it may produce errors.\r\n\r\nTo store multiple characters (or whole words), use strings (which you will learn more about in a later chapter):\r\n\r\nExample\r\nchar myText[] = \"Hello\";\r\nprintf(\"%s\", myText);\r\nFor now, just know that we use strings for storing multiple characters\/text, and the char type for single characters."
            },
            "Numeric Data Types": {
                "description": "Numeric Types\r\nUse int when you need to store a whole number without decimals, like 35 or 1000, and float or double when you need a floating point number (with decimals), like 9.99 or 3.14515.\r\n\r\nint\r\nint myNum = 1000;\r\nprintf(\"%d\", myNum);\r\nfloat\r\nfloat myNum = 5.75;\r\nprintf(\"%f\", myNum);\r\ndouble\r\ndouble myNum = 19.99;\r\nprintf(\"%lf\", myNum);\r\nfloat vs. double\r\n\r\nThe precision of a floating point value indicates how many digits the value can have after the decimal point. The precision of float is six or seven decimal digits, while double variables have a precision of about 15 digits. Therefore, it is often safer to use double for most calculations - but note that it takes up twice as much memory as float (8 bytes vs. 4 bytes).\r\n\r\nScientific Numbers\r\nA floating point number can also be a scientific number with an \"e\" to indicate the power of 10:\r\n\r\nExample\r\nfloat f1 = 35e3;\r\ndouble d1 = 12E4;\r\n\r\nprintf(\"%f\\n\", f1);\r\nprintf(\"%lf\", d1);"
            },
            "Decimal Precision": {
                "description": "Set Decimal Precision\r\nYou have probably already noticed that if you print a floating point number, the output will show many digits after the decimal point:\r\n\r\nExample\r\nfloat myFloatNum = 3.5;\r\ndouble myDoubleNum = 19.99;\r\n\r\nprintf(\"%f\\n\", myFloatNum); \/\/ Outputs 3.500000\r\nprintf(\"%lf\", myDoubleNum); \/\/ Outputs 19.990000\r\nIf you want to remove the extra zeros (set decimal precision), you can use a dot (.) followed by a number that specifies how many digits that should be shown after the decimal point:\r\n\r\nExample\r\nfloat myFloatNum = 3.5;\r\n\r\nprintf(\"%f\\n\", myFloatNum);   \/\/ Default will show 6 digits after the decimal point\r\nprintf(\"%.1f\\n\", myFloatNum); \/\/ Only show 1 digit\r\nprintf(\"%.2f\\n\", myFloatNum); \/\/ Only show 2 digits\r\nprintf(\"%.4f\", myFloatNum);   \/\/ Only show 4 digits"
            },
            "The sizeof Operator": {
                "description": "Get the Memory Size\r\nWe introduced in the data types chapter that the memory size of a variable varies depending on the type:\r\n\r\nData Type\tSize\r\nint\t2 or 4 bytes\r\nfloat\t4 bytes\r\ndouble\t8 bytes\r\nchar\t1 byte\r\nThe memory size refers to how much space a type occupies in the computer's memory.\r\n\r\nTo actually get the size (in bytes) of a data type or variable, use the sizeof operator:\r\n\r\nExample\r\nint myInt;\r\nfloat myFloat;\r\ndouble myDouble;\r\nchar myChar;\r\n\r\nprintf(\"%lu\\n\", sizeof(myInt));\r\nprintf(\"%lu\\n\", sizeof(myFloat));\r\nprintf(\"%lu\\n\", sizeof(myDouble));\r\nprintf(\"%lu\\n\", sizeof(myChar));\r\nNote that we use the %lu format specifer to print the result, instead of %d. It is because the compiler expects the sizeof operator to return a long unsigned int (%lu), instead of int (%d). On some computers it might work with %d, but it is safer to use %lu.\r\n\r\nWhy Should I Know the Size of Data Types?\r\nKnowing the size of different data types is important because it says something about memory usage and performance.\r\n\r\nFor example, the size of a char type is 1 byte. Which means if you have an array of 1000 char values, it will occupy 1000 bytes (1 KB) of memory.\r\n\r\nUsing the right data type for the right purpose will save memory and improve the performance of your program."
            },
            "Type Conversion": {
                "description": "Type Conversion\r\nSometimes, you have to convert the value of one data type to another type. This is known as type conversion.\r\n\r\nFor example, if you try to divide two integers, 5 by 2, you would expect the result to be 2.5. But since we are working with integers (and not floating-point values), the following example will just output 2:\r\n\r\nExample\r\nint x = 5;\r\nint y = 2;\r\nint sum = 5 \/ 2;\r\n\r\nprintf(\"%d\", sum); \/\/ Outputs 2\r\nTo get the right result, you need to know how type conversion works.\r\n\r\nThere are two types of conversion in C:\r\n\r\nImplicit Conversion (automatically)\r\nExplicit Conversion (manually)\r\nImplicit Conversion\r\nImplicit conversion is done automatically by the compiler when you assign a value of one type to another.\r\n\r\nFor example, if you assign an int value to a float type:\r\n\r\nExample\r\n\/\/ Automatic conversion: int to float\r\nfloat myFloat = 9;\r\n\r\nprintf(\"%f\", myFloat); \/\/ 9.000000\r\nAs you can see, the compiler automatically converts the int value 9 to a float value of 9.000000.\r\n\r\nThis can be risky, as you might lose control over specific values in certain situations.\r\n\r\nEspecially if it was the other way around - the following example automatically converts the float value 9.99 to an int value of 9:\r\n\r\nExample\r\n\/\/ Automatic conversion: float to int\r\nint myInt = 9.99;\r\n\r\nprintf(\"%d\", myInt); \/\/ 9\r\nWhat happened to .99? We might want that data in our program! So be careful. It is important that you know how the compiler work in these situations, to avoid unexpected results.\r\n\r\nAs another example, if you divide two integers: 5 by 2, you know that the sum is 2.5. And as you know from the beginning of this page, if you store the sum as an integer, the result will only display the number 2. Therefore, it would be better to store the sum as a float or a double, right?\r\n\r\nExample\r\nfloat sum = 5 \/ 2;\r\n\r\nprintf(\"%f\", sum); \/\/ 2.000000\r\nWhy is the result 2.00000 and not 2.5? Well, it is because 5 and 2 are still integers in the division. In this case, you need to manually convert the integer values to floating-point values. (see below).\r\n\r\nExplicit Conversion\r\nExplicit conversion is done manually by placing the type in parentheses () in front of the value.\r\n\r\nConsidering our problem from the example above, we can now get the right result:\r\n\r\nExample\r\n\/\/ Manual conversion: int to float\r\nfloat sum = (float) 5 \/ 2;\r\n\r\nprintf(\"%f\", sum); \/\/ 2.500000\r\nYou can also place the type in front of a variable:\r\n\r\nExample\r\nint num1 = 5;\r\nint num2 = 2;\r\nfloat sum = (float) num1 \/ num2;\r\n\r\nprintf(\"%f\", sum); \/\/ 2.500000\r\nAnd since you learned about \"decimal precision\" in the previous chapter, you could make the output even cleaner by removing the extra zeros (if you like):\r\n\r\nExample\r\nint num1 = 5;\r\nint num2 = 2;\r\nfloat sum = (float) num1 \/ num2;\r\n\r\nprintf(\"%.1f\", sum); \/\/ 2.5\r\nReal-Life Example\r\nHere's a real-life example of data types and type conversion where we create a program to calculate the percentage of a user's score in relation to the maximum score in a game:\r\n\r\nExample\r\n\/\/ Set the maximum possible score in the game to 500\r\nint maxScore = 500;\r\n\r\n\/\/ The actual score of the user\r\nint userScore = 423;\r\n\r\n\/* Calculate the percantage of the user's score in relation to the maximum available score.\r\nConvert userScore to float to make sure that the division is accurate *\/\r\nfloat percentage = (float) userScore \/ maxScore * 100.0;\r\n\r\n\/\/ Print the percentage\r\nprintf(\"User's percentage is %.2f\", percentage);"
            }
        },
        "Constants & Operators": {
            "Constants": {
                "description": "Constants\r\nIf you don't want others (or yourself) to change existing variable values, you can use the const keyword.\r\n\r\nThis will declare the variable as \"constant\", which means unchangeable and read-only:\r\n\r\nExample\r\nconst int myNum = 15;  \/\/ myNum will always be 15\r\nmyNum = 10;  \/\/ error: assignment of read-only variable 'myNum'\r\nYou should always declare the variable as constant when you have values that are unlikely to change:\r\n\r\nExample\r\nconst int minutesPerHour = 60;\r\nconst float PI = 3.14;\r\nNotes On Constants\r\nWhen you declare a constant variable, it must be assigned with a value:\r\n\r\nExample\r\nLike this:\r\n\r\nconst int minutesPerHour = 60;\r\nThis however, will not work:\r\n\r\nconst int minutesPerHour;\r\nminutesPerHour = 60; \/\/ error\r\nGood Practice\r\nAnother thing about constant variables, is that it is considered good practice to declare them with uppercase.\r\n\r\nIt is not required, but useful for code readability and common for C programmers:\r\n\r\nExample\r\nconst int BIRTHYEAR = 1980;"
            },
            "Operators": {
                "description": "Operators\r\nOperators are used to perform operations on variables and values.\r\n\r\nIn the example below, we use the + operator to add together two values:\r\n\r\nExample\r\nint myNum = 100 + 50;\r\nAlthough the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:\r\n\r\nExample\r\nint sum1 = 100 + 50;        \/\/ 150 (100 + 50)\r\nint sum2 = sum1 + 250;      \/\/ 400 (150 + 250)\r\nint sum3 = sum2 + sum2;     \/\/ 800 (400 + 400)\r\nC divides the operators into the following groups:\r\n\r\nArithmetic operators\r\nAssignment operators\r\nComparison operators\r\nLogical operators\r\nBitwise operators\r\nArithmetic Operators\r\nArithmetic operators are used to perform common mathematical operations.\r\n\r\nOperator\tName\tDescription\tExample\t\r\n+\tAddition\tAdds together two values\tx + y\t\r\n-\tSubtraction\tSubtracts one value from another\tx - y\t\r\n*\tMultiplication\tMultiplies two values\tx * y\t\r\n\/\tDivision\tDivides one value by another\tx \/ y\t\r\n%\tModulus\tReturns the division remainder\tx % y\t\r\n++\tIncrement\tIncreases the value of a variable by 1\t++x\t\r\n--\tDecrement\tDecreases the value of a variable by 1\t--x\t\r\nAssignment Operators\r\nAssignment operators are used to assign values to variables.\r\n\r\nIn the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:\r\n\r\nExample\r\nint x = 10;\r\nThe addition assignment operator (+=) adds a value to a variable:\r\n\r\nExample\r\nint x = 10;\r\nx += 5;\r\nA list of all assignment operators:\r\n\r\nOperator\tExample\tSame As\tT\r\n=\tx = 5\tx = 5\t\r\n+=\tx += 3\tx = x + 3\t\r\n-=\tx -= 3\tx = x - 3\t\r\n*=\tx *= 3\tx = x * 3\t\r\n\/=\tx \/= 3\tx = x \/ 3\t\r\n%=\tx %= 3\tx = x % 3\t\r\n&=\tx &= 3\tx = x & 3\t\r\n|=\tx |= 3\tx = x | 3\t\r\n^=\tx ^= 3\tx = x ^ 3\t\r\n>>=\tx >>= 3\tx = x >> 3\t\r\n<<=\tx <<= 3\tx = x << 3\t\r\nADVERTISEMENT\r\n\r\nComparison Operators\r\nComparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.\r\n\r\nThe return value of a comparison is either 1 or 0, which means true (1) or false (0). These values are known as Boolean values, and you will learn more about them in the Booleans and If..Else chapter.\r\n\r\nIn the following example, we use the greater than operator (>) to find out if 5 is greater than 3:\r\n\r\nExample\r\nint x = 5;\r\nint y = 3;\r\nprintf(\"%d\", x > y); \/\/ returns 1 (true) because 5 is greater than 3\r\nA list of all comparison operators:\r\n\r\nOperator\tName\tExample\tDescription\r\n==\tEqual to\tx == y\tReturns 1 if the values are equal\t\r\n!=\tNot equal\tx != y\tReturns 1 if the values are not equal\t\r\n>\tGreater than\tx > y\tReturns 1 if the first value is greater than the second value\t\r\n<\tLess than\tx < y\tReturns 1 if the first value is less than the second value\t\r\n>=\tGreater than or equal to\tx >= y\tReturns 1 if the first value is greater than, or equal to, the second value\t\r\n<=\tLess than or equal to\tx <= y\tReturns 1 if the first value is less than, or equal to, the second value\t\r\nLogical Operators\r\nYou can also test for true or false values with logical operators.\r\n\r\nLogical operators are used to determine the logic between variables or values, by combining multiple conditions:\r\n\r\nOperator\tName\tExample\tDescription\r\n&& \tAND\tx < 5 &&  x < 10\tReturns 1 if both statements are true\t\r\n|| \tOR\tx < 5 || x < 4\tReturns 1 if one of the statements is true\t\r\n!\tNOT\t!(x < 5 && x < 10)\tReverse the result, returns 0 if the result is 1"
            },
            "Booleans": {
                "description": "Booleans\r\nVery often, in programming, you will need a data type that can only have one of two values, like:\r\n\r\nYES \/ NO\r\nON \/ OFF\r\nTRUE \/ FALSE\r\nFor this, C has a bool data type, which is known as booleans.\r\n\r\nBooleans represent values that are either true or false.\r\n\r\nBoolean Variables\r\nIn C, the bool type is not a built-in data type, like int or char.\r\n\r\nIt was introduced in C99, and you must import the following header file to use it:\r\n\r\n#include <stdbool.h>\r\nA boolean variable is declared with the bool keyword and can take the values true or false:\r\n\r\nbool isProgrammingFun = true;\r\nbool isFishTasty = false;\r\nBefore trying to print the boolean variables, you should know that boolean values are returned as integers:\r\n\r\n1 (or any other number that is not 0) represents true\r\n0 represents false\r\nTherefore, you must use the %d format specifier to print a boolean value:\r\n\r\nExample\r\n\/\/ Create boolean variables\r\nbool isProgrammingFun = true;\r\nbool isFishTasty = false;\r\n\r\n\/\/ Return boolean values\r\nprintf(\"%d\", isProgrammingFun);   \/\/ Returns 1 (true)\r\nprintf(\"%d\", isFishTasty);        \/\/ Returns 0 (false)\r\nHowever, it is more common to return a boolean value by comparing values and variables.\r\n\r\nComparing Values and Variables\r\nComparing values are useful in programming, because it helps us to find answers and make decisions.\r\n\r\nFor example, you can use a comparison operator, such as the greater than (>) operator, to compare two values:\r\n\r\nExample\r\nprintf(\"%d\", 10 > 9);  \/\/ Returns 1 (true) because 10 is greater than 9\r\nFrom the example above, you can see that the return value is a boolean value (1).\r\n\r\nYou can also compare two variables:\r\n\r\nExample\r\nint x = 10;\r\nint y = 9;\r\nprintf(\"%d\", x > y);\r\nIn the example below, we use the equal to (==) operator to compare different values:\r\n\r\nExample\r\nprintf(\"%d\", 10 == 10); \/\/ Returns 1 (true), because 10 is equal to 10\r\nprintf(\"%d\", 10 == 15); \/\/ Returns 0 (false), because 10 is not equal to 15\r\nprintf(\"%d\", 5 == 55);  \/\/ Returns 0 (false) because 5 is not equal to 55"
            }
        },
        "If Else": {
            "The If Statement": {
                "description": "Conditions and If Statements\r\nYou have already learned that C supports the usual logical conditions from mathematics:\r\n\r\nLess than: a < b\r\nLess than or equal to: a <= b\r\nGreater than: a > b\r\nGreater than or equal to: a >= b\r\nEqual to a == b\r\nNot Equal to: a != b\r\nYou can use these conditions to perform different actions for different decisions.\r\n\r\nC has the following conditional statements:\r\n\r\nUse if to specify a block of code to be executed, if a specified condition is true\r\nUse else to specify a block of code to be executed, if the same condition is false\r\nUse else if to specify a new condition to test, if the first condition is false\r\nUse switch to specify many alternative blocks of code to be executed\r\nThe if Statement\r\nUse the if statement to specify a block of code to be executed if a condition is true.\r\n\r\nSyntax\r\nif (condition) {\r\n  \/\/ block of code to be executed if the condition is true\r\n}\r\nNote that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.\r\n\r\nIn the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:\r\n\r\nExample\r\nif (20 > 18) {\r\n  printf(\"20 is greater than 18\");\r\n}\r\nWe can also test variables:\r\n\r\nExample\r\nint x = 20;\r\nint y = 18;\r\nif (x > y) {\r\n  printf(\"x is greater than y\");\r\n}\r\nExample explained\r\nIn the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\"."
            },
            "Else": {
                "description": "The else Statement\r\nUse the else statement to specify a block of code to be executed if the condition is false.\r\n\r\nSyntax\r\nif (condition) {\r\n  \/\/ block of code to be executed if the condition is true\r\n} else {\r\n  \/\/ block of code to be executed if the condition is false\r\n}\r\nExample\r\nint time = 20;\r\nif (time < 18) {\r\n  printf(\"Good day.\");\r\n} else {\r\n  printf(\"Good evening.\");\r\n}\r\n\/\/ Outputs \"Good evening.\"\r\nExample explained\r\nIn the example above, time (20) is greater than 18, so the condition is false. Because of this, we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\"."
            },
            "Else If": {
                "description": "The else if Statement\r\nUse the else if statement to specify a new condition if the first condition is false.\r\n\r\nSyntax\r\nif (condition1) {\r\n  \/\/ block of code to be executed if condition1 is true\r\n} else if (condition2) {\r\n  \/\/ block of code to be executed if the condition1 is false and condition2 is true\r\n} else {\r\n  \/\/ block of code to be executed if the condition1 is false and condition2 is false\r\n}\r\nExample\r\nint time = 22;\r\nif (time < 10) {\r\n  printf(\"Good morning.\");\r\n} else if (time < 20) {\r\n  printf(\"Good day.\");\r\n} else {\r\n  printf(\"Good evening.\");\r\n}\r\n\/\/ Outputs \"Good evening.\"\r\nExample explained\r\nIn the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the else if statement, is also false, so we move on to the else condition since condition1 and condition2 is both false - and print to the screen \"Good evening\".\r\n\r\nHowever, if the time was 14, our program would print \"Good day.\""
            },
            "Short Hand If Else": {
                "description": "Short Hand If...Else (Ternary Operator)\r\nThere is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:\r\n\r\nSyntax\r\nvariable = (condition) ? expressionTrue : expressionFalse;\r\nInstead of writing:\r\n\r\nExample\r\nint time = 20;\r\nif (time < 18) {\r\n  printf(\"Good day.\");\r\n} else {\r\n  printf(\"Good evening.\");\r\n}\r\nYou can simply write:\r\n\r\nExample\r\nint time = 20;\r\n(time < 18) ? printf(\"Good day.\") : printf(\"Good evening.\");"
            }
        },
        "Switch": {
            "Switch Statement": {
                "description": "Instead of writing many if..else statements, you can use the switch statement.\r\n\r\nThe switch statement selects one of many code blocks to be executed:\r\n\r\nSyntax\r\nswitch (expression) {\r\n  case x:\r\n    \/\/ code block\r\n    break;\r\n  case y:\r\n    \/\/ code block\r\n    break;\r\n  default:\r\n    \/\/ code block\r\n}\r\nThis is how it works:\r\n\r\nThe switch expression is evaluated once\r\nThe value of the expression is compared with the values of each case\r\nIf there is a match, the associated block of code is executed\r\nThe break statement breaks out of the switch block and stops the execution\r\nThe default statement is optional, and specifies some code to run if there is no case match\r\nThe example below uses the weekday number to calculate the weekday name:\r\n\r\nExample\r\nint day = 4;\r\n\r\nswitch (day) {\r\n  case 1:\r\n    printf(\"Monday\");\r\n    break;\r\n  case 2:\r\n    printf(\"Tuesday\");\r\n    break;\r\n  case 3:\r\n    printf(\"Wednesday\");\r\n    break;\r\n  case 4:\r\n    printf(\"Thursday\");\r\n    break;\r\n  case 5:\r\n    printf(\"Friday\");\r\n    break;\r\n  case 6:\r\n    printf(\"Saturday\");\r\n    break;\r\n  case 7:\r\n    printf(\"Sunday\");\r\n    break;\r\n}\r\n\r\n\/\/ Outputs \"Thursday\" (day 4)"
            },
            "The break Keyword": {
                "description": "When C reaches a break keyword, it breaks out of the switch block.\r\n\r\nThis will stop the execution of more code and case testing inside the block.\r\n\r\nWhen a match is found, and the job is done, it's time for a break. There is no need for more testing.\r\n\r\nA break can save a lot of execution time because it \"ignores\" the execution of all the rest of the code in the switch block."
            },
            "The default Keyword": {
                "description": "The default keyword specifies some code to run if there is no case match:\r\n\r\nExample\r\nint day = 4;\r\n\r\nswitch (day) {\r\n  case 6:\r\n    printf(\"Today is Saturday\");\r\n    break;\r\n  case 7:\r\n    printf(\"Today is Sunday\");\r\n    break;\r\n  default:\r\n    printf(\"Looking forward to the Weekend\");\r\n}\r\n\r\n\/\/ Outputs \"Looking forward to the Weekend\"\r\nNote: The default keyword must be used as the last statement in the switch, and it does not need a break."
            }
        },
        "While Loop": {
            "While Loop": {
                "description": "Loops\r\nLoops can execute a block of code as long as a specified condition is reached.\r\n\r\nLoops are handy because they save time, reduce errors, and they make code more readable.\r\n\r\nWhile Loop\r\nThe while loop loops through a block of code as long as a specified condition is true:\r\n\r\nSyntax\r\nwhile (condition) {\r\n  \/\/ code block to be executed\r\n}\r\nIn the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:\r\n\r\nExample\r\nint i = 0;\r\n\r\nwhile (i < 5) {\r\n  printf(\"%d\\n\", i);\r\n  i++;\r\n}\r\nNote: Do not forget to increase the variable used in the condition (i++), otherwise the loop will never end!"
            },
            "Do\/While Loop": {
                "description": "The Do\/While Loop\r\nThe do\/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\r\n\r\nSyntax\r\ndo {\r\n  \/\/ code block to be executed\r\n}\r\nwhile (condition);\r\nThe example below uses a do\/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:\r\n\r\nExample\r\nint i = 0;\r\n\r\ndo {\r\n  printf(\"%d\\n\", i);\r\n  i++;\r\n}\r\nwhile (i < 5);"
            }
        },
        "For Loop": {
            "For Loop": {
                "description": "When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:\r\n\r\nSyntax\r\nfor (expression 1; expression 2; expression 3) {\r\n  \/\/ code block to be executed\r\n}\r\nExpression 1 is executed (one time) before the execution of the code block.\r\n\r\nExpression 2 defines the condition for executing the code block.\r\n\r\nExpression 3 is executed (every time) after the code block has been executed.\r\n\r\nThe example below will print the numbers 0 to 4:\r\n\r\nExample\r\nint i;\r\n\r\nfor (i = 0; i < 5; i++) {\r\n  printf(\"%d\\n\", i);\r\n}\r\nExample explained\r\nExpression 1 sets a variable before the loop starts (int i = 0).\r\n\r\nExpression 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.\r\n\r\nExpression 3 increases a value (i++) each time the code block in the loop has been executed."
            },
            "Nested Loops": {
                "description": "Nested Loops\r\nIt is also possible to place a loop inside another loop. This is called a nested loop.\r\n\r\nThe \"inner loop\" will be executed one time for each iteration of the \"outer loop\":\r\n\r\nExample\r\nint i, j;\r\n\r\n\/\/ Outer loop\r\nfor (i = 1; i <= 2; ++i) {\r\n  printf(\"Outer: %d\\n\", i);  \/\/ Executes 2 times\r\n\r\n  \/\/ Inner loop\r\n  for (j = 1; j <= 3; ++j) {\r\n    printf(\" Inner: %d\\n\", j);  \/\/ Executes 6 times (2 * 3)\r\n  }\r\n}"
            }
        },
        "Break and Continue": {
            "Break": {
                "description": "Break\r\nYou have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch statement.\r\n\r\nThe break statement can also be used to jump out of a loop.\r\n\r\nThis example jumps out of the for loop when i is equal to 4:\r\n\r\nExample\r\nint i;\r\n\r\nfor (i = 0; i < 10; i++) {\r\n  if (i == 4) {\r\n    break;\r\n  }\r\n  printf(\"%d\\n\", i);\r\n}\r\n"
            },
            "Continue": {
                "description": "Continue\r\nThe continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.\r\n\r\nThis example skips the value of 4:\r\n\r\nExample\r\nint i;\r\n\r\nfor (i = 0; i < 10; i++) {\r\n  if (i == 4) {\r\n    continue;\r\n  }\r\n  printf(\"%d\\n\", i);\r\n}"
            },
            "Some  More Examples": {
                "description": "Break and Continue in While Loop\r\nYou can also use break and continue in while loops:\r\n\r\nBreak Example\r\nint i = 0;\r\n\r\nwhile (i < 10) {\r\n  if (i == 4) {\r\n    break;\r\n  }\r\n  printf(\"%d\\n\", i);\r\n  i++;\r\n}\r\nContinue Example\r\nint i = 0;\r\n\r\nwhile (i < 10) {\r\n  if (i == 4) {\r\n    i++;\r\n    continue;\r\n  }\r\n  printf(\"%d\\n\", i);\r\n  i++;\r\n}\r\n"
            }
        },
        "Arrays": {
            "Introduction": {
                "description": "Arrays\r\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.\r\n\r\nTo create an array, define the data type (like int) and specify the name of the array followed by square brackets [].\r\n\r\nTo insert values to it, use a comma-separated list inside curly braces, and make sure all values are of the same data type:\r\n\r\nint myNumbers[] = {25, 50, 75, 100};\r\nWe have now created a variable that holds an array of four integers.\r\n\r\nAccess the Elements of an Array\r\nTo access an array element, refer to its index number.\r\n\r\nArray indexes start with 0: [0] is the first element. [1] is the second element, etc.\r\n\r\nThis statement accesses the value of the first element [0] in myNumbers:\r\n\r\nExample\r\nint myNumbers[] = {25, 50, 75, 100};\r\nprintf(\"%d\", myNumbers[0]);\r\n\r\n\/\/ Outputs 25\r\nChange an Array Element\r\nTo change the value of a specific element, refer to the index number:\r\n\r\nExample\r\nmyNumbers[0] = 33;\r\nExample\r\nint myNumbers[] = {25, 50, 75, 100};\r\nmyNumbers[0] = 33;\r\n\r\nprintf(\"%d\", myNumbers[0]);\r\n\r\n\/\/ Now outputs 33 instead of 25\r\n\r\n\r\n\r\nLoop Through an Array\r\nYou can loop through the array elements with the for loop.\r\n\r\nThe following example outputs all elements in the myNumbers array:\r\n\r\nExample\r\nint myNumbers[] = {25, 50, 75, 100};\r\nint i;\r\n\r\nfor (i = 0; i < 4; i++) {\r\n  printf(\"%d\\n\", myNumbers[i]);\r\n}\r\nSet Array Size\r\nAnother common way to create arrays, is to specify the size of the array, and add elements later:\r\n\r\nExample\r\n\/\/ Declare an array of four integers:\r\nint myNumbers[4];\r\n\r\n\/\/ Add elements\r\nmyNumbers[0] = 25;\r\nmyNumbers[1] = 50;\r\nmyNumbers[2] = 75;\r\nmyNumbers[3] = 100;\r\nUsing this method, you should know the number of array elements in advance, in order for the program to store enough memory.\r\n\r\nYou are not able to change the size of the array after creation.\r\n\r\nAvoid Mixing Data Types\r\nIt is important to note that all elements in an array must be of the same data type.\r\n\r\nThis means you cannot mix different types of values, like integers and floating point numbers, in the same array:\r\n\r\nExample\r\nint myArray[] = {25, 50, 75, 3.15, 5.99};\r\nIn the example above, the values 3.15 and 5.99 will be truncated to 3 and 5. In some cases it might also result in an error, so it is important to always make sure that the elements in the array are of the same type."
            },
            "Array Size": {
                "description": "Get Array Size or Length\r\nTo get the size of an array, you can use the sizeof operator:\r\n\r\nExample\r\nint myNumbers[] = {10, 25, 50, 75, 100};\r\nprintf(\"%lu\", sizeof(myNumbers)); \/\/ Prints 20\r\nWhy did the result show 20 instead of 5, when the array contains 5 elements?\r\n\r\n- It is because the sizeof operator returns the size of a type in bytes.\r\n\r\nYou learned from the Data Types chapter that an int type is usually 4 bytes, so from the example above, 4 x 5 (4 bytes x 5 elements) = 20 bytes.\r\n\r\nKnowing the memory size of an array is great when you are working with larger programs that require good memory management.\r\n\r\nBut when you just want to find out how many elements an array has, you can use the following formula (which divides the size of the array by the size of the first element in the array):\r\n\r\nExample\r\nint myNumbers[] = {10, 25, 50, 75, 100};\r\nint length = sizeof(myNumbers) \/ sizeof(myNumbers[0]);\r\n\r\nprintf(\"%d\", length);  \/\/ Prints 5\r\nMaking Better Loops\r\nIn the array loops section in the previous chapter, we wrote the size of the array in the loop condition (i < 4). This is not ideal, since it will only work for arrays of a specified size.\r\n\r\nHowever, by using the sizeof formula from the example above, we can now make loops that work for arrays of any size, which is more sustainable.\r\n\r\nInstead of writing:\r\n\r\nExample\r\nint myNumbers[] = {25, 50, 75, 100};\r\nint i;\r\n\r\nfor (i = 0; i < 4; i++) {\r\n  printf(\"%d\\n\", myNumbers[i]);\r\n}\r\nIt is better to write:\r\n\r\nExample\r\nint myNumbers[] = {25, 50, 75, 100};\r\nint length = sizeof(myNumbers) \/ sizeof(myNumbers[0]);\r\nint i;\r\n\r\nfor (i = 0; i < length; i++) {\r\n  printf(\"%d\\n\", myNumbers[i]);\r\n}\r\n"
            },
            "Multidimensional Arrays": {
                "description": "Multidimensional Arrays\r\nIn the previous chapter, you learned about arrays, which is also known as single dimension arrays. These are great, and something you will use a lot while programming in C. However, if you want to store data as a tabular form, like a table with rows and columns, you need to get familiar with multidimensional arrays.\r\n\r\nA multidimensional array is basically an array of arrays.\r\n\r\nArrays can have any number of dimensions. In this chapter, we will introduce the most common; two-dimensional arrays (2D).\r\n\r\nTwo-Dimensional Arrays\r\nA 2D array is also known as a matrix (a table of rows and columns).\r\n\r\nTo create a 2D array of integers, take a look at the following example:\r\n\r\nint matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };\r\nThe first dimension represents the number of rows [2], while the second dimension represents the number of columns [3]. The values are placed in row-order, and can be visualized like this:\r\n\r\n\r\nAccess the Elements of a 2D Array\r\nTo access an element of a two-dimensional array, you must specify the index number of both the row and column.\r\n\r\nThis statement accesses the value of the element in the first row (0) and third column (2) of the matrix array.\r\n\r\nExample\r\nint matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };\r\n\r\nprintf(\"%d\", matrix[0][2]);  \/\/ Outputs 2\r\nRemember that: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.\r\n\r\n\r\nChange Elements in a 2D Array\r\nTo change the value of an element, refer to the index number of the element in each of the dimensions:\r\n\r\nThe following example will change the value of the element in the first row (0) and first column (0):\r\n\r\nExample\r\nint matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };\r\nmatrix[0][0] = 9;\r\n\r\nprintf(\"%d\", matrix[0][0]);  \/\/ Now outputs 9 instead of 1\r\nLoop Through a 2D Array\r\nTo loop through a multi-dimensional array, you need one loop for each of the array's dimensions.\r\n\r\nThe following example outputs all elements in the matrix array:\r\n\r\nExample\r\nint matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };\r\n\r\nint i, j;\r\nfor (i = 0; i < 2; i++) {\r\n  for (j = 0; j < 3; j++) {\r\n    printf(\"%d\\n\", matrix[i][j]);\r\n  }\r\n}"
            }
        },
        "Strings": {
            "Strings": {
                "description": "Strings\r\nStrings are used for storing text\/characters.\r\n\r\nFor example, \"Hello World\" is a string of characters.\r\n\r\nUnlike many other programming languages, C does not have a String type to easily create string variables. Instead, you must use the char type and create an array of characters to make a string in C:\r\n\r\nchar greetings[] = \"Hello World!\";\r\nNote that you have to use double quotes (\"\").\r\n\r\nTo output the string, you can use the printf() function together with the format specifier %s to tell C that we are now working with strings:\r\n\r\nExample\r\nchar greetings[] = \"Hello World!\";\r\nprintf(\"%s\", greetings);\r\nAccess Strings\r\nSince strings are actually arrays in C, you can access a string by referring to its index number inside square brackets [].\r\n\r\nThis example prints the first character (0) in greetings:\r\n\r\nExample\r\nchar greetings[] = \"Hello World!\";\r\nprintf(\"%c\", greetings[0]);\r\nNote that we have to use the %c format specifier to print a single character.\r\n\r\nModify Strings\r\nTo change the value of a specific character in a string, refer to the index number, and use single quotes:\r\n\r\nExample\r\nchar greetings[] = \"Hello World!\";\r\ngreetings[0] = 'J';\r\nprintf(\"%s\", greetings);\r\n\/\/ Outputs Jello World! instead of Hello World!\r\n\r\n\r\nLoop Through a String\r\nYou can also loop through the characters of a string, using a for loop:\r\n\r\nExample\r\nchar carName[] = \"Volvo\";\r\nint i;\r\n\r\nfor (i = 0; i < 5; ++i) {\r\n  printf(\"%c\\n\", carName[i]);\r\n}\r\nAnd like we specified in the arrays chapter, you can also use the sizeof formula (instead of manually write the size of the array in the loop condition (i < 5)) to make the loop more sustainable:\r\n\r\nExample\r\nchar carName[] = \"Volvo\";\r\nint length = sizeof(carName) \/ sizeof(carName[0]);\r\nint i;\r\n\r\nfor (i = 0; i < length; ++i) {\r\n  printf(\"%c\\n\", carName[i]);\r\n}\r\nAnother Way Of Creating Strings\r\nIn the examples above, we used a \"string literal\" to create a string variable. This is the easiest way to create a string in C.\r\n\r\nYou should also note that you can create a string with a set of characters. This example will produce the same result as the example in the beginning of this page:\r\n\r\nExample\r\nchar greetings[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\\0'};\r\nprintf(\"%s\", greetings);\r\nWhy do we include the \\0 character at the end? This is known as the \"null terminating character\", and must be included when creating strings using this method. It tells C that this is the end of the string.\r\n\r\nDifferences\r\nThe difference between the two ways of creating strings, is that the first method is easier to write, and you do not have to include the \\0 character, as C will do it for you.\r\n\r\nYou should note that the size of both arrays is the same: They both have 13 characters (space also counts as a character by the way), including the \\0 character:\r\n\r\nExample\r\nchar greetings[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\\0'};\r\nchar greetings2[] = \"Hello World!\";\r\n\r\nprintf(\"%lu\\n\", sizeof(greetings));   \/\/ Outputs 13\r\nprintf(\"%lu\\n\", sizeof(greetings2));  \/\/ Outputs 13\r\nReal-Life Example\r\nUse strings to create a simple welcome message:\r\n\r\nExample\r\nchar message[] = \"Good to see you,\";\r\nchar fname[] = \"John\";\r\n\r\nprintf(\"%s %s!\", message, fname);"
            },
            "Special Characters": {
                "description": "Strings - Special Characters\r\nBecause strings must be written within quotes, C will misunderstand this string, and generate an error:\r\n\r\nchar txt[] = \"We are the so-called \"Vikings\" from the north.\";\r\nThe solution to avoid this problem, is to use the backslash escape character.\r\n\r\nThe backslash (\\) escape character turns special characters into string characters:\r\n\r\nEscape character\tResult\tDescription\r\n\\'\t'\tSingle quote\r\n\\\"\t\"\tDouble quote\r\n\\\\\t\\\tBackslash\r\nThe sequence \\\"  inserts a double quote in a string:\r\n\r\n\r\nExample\r\nchar txt[] = \"We are the so-called \\\"Vikings\\\" from the north.\";\r\nThe sequence \\'  inserts a single quote in a string:\r\n\r\n\r\nExample\r\nchar txt[] = \"It\\'s alright.\";\r\nThe sequence \\\\  inserts a single backslash in a string:\r\n\r\n\r\nExample\r\nchar txt[] = \"The character \\\\ is called backslash.\";\r\nOther popular escape characters in C are:\r\n\r\nEscape Character\tResult\r\n\\n\tNew Line\t\r\n\\t\tTab\t\r\n\\0\tNull"
            },
            "String Functions": {
                "description": "String Functions\r\nC also has many useful string functions, which can be used to perform certain operations on strings.\r\n\r\nTo use them, you must include the <string.h> header file in your program:\r\n\r\n#include <string.h>\r\nString Length\r\nFor example, to get the length of a string, you can use the strlen() function:\r\n\r\nExample\r\nchar alphabet[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nprintf(\"%d\", strlen(alphabet));\r\nIn the Strings chapter, we used sizeof to get the size of a string\/array. Note that sizeof and strlen behaves differently, as sizeof also includes the \\0 character when counting:\r\n\r\nExample\r\nchar alphabet[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nprintf(\"%d\", strlen(alphabet));   \/\/ 26\r\nprintf(\"%d\", sizeof(alphabet));   \/\/ 27\r\nIt is also important that you know that sizeof will always return the memory size (in bytes), and not the actual string length:\r\n\r\nExample\r\nchar alphabet[50] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nprintf(\"%d\", strlen(alphabet));   \/\/ 26\r\nprintf(\"%d\", sizeof(alphabet));   \/\/ 50\r\nConcatenate Strings\r\nTo concatenate (combine) two strings, you can use the strcat() function:\r\n\r\nExample\r\nchar str1[20] = \"Hello \";\r\nchar str2[] = \"World!\";\r\n\r\n\/\/ Concatenate str2 to str1 (result is stored in str1)\r\nstrcat(str1, str2);\r\n\r\n\/\/ Print str1\r\nprintf(\"%s\", str1);\r\nNote that the size of str1 should be large enough to store the result of the two strings combined (20 in our example).\r\n\r\n\r\n\r\nCopy Strings\r\nTo copy the value of one string to another, you can use the strcpy() function:\r\n\r\nExample\r\nchar str1[20] = \"Hello World!\";\r\nchar str2[20];\r\n\r\n\/\/ Copy str1 to str2\r\nstrcpy(str2, str1);\r\n\r\n\/\/ Print str2\r\nprintf(\"%s\", str2);\r\nNote that the size of str2 should be large enough to store the copied string (20 in our example).\r\n\r\nCompare Strings\r\nTo compare two strings, you can use the strcmp() function.\r\n\r\nIt returns 0 if the two strings are equal, otherwise a value that is not 0:\r\n\r\nExample\r\nchar str1[] = \"Hello\";\r\nchar str2[] = \"Hello\";\r\nchar str3[] = \"Hi\";\r\n\r\n\/\/ Compare str1 and str2, and print the result\r\nprintf(\"%d\\n\", strcmp(str1, str2));  \/\/ Returns 0 (the strings are equal)\r\n\r\n\/\/ Compare str1 and str3, and print the result\r\nprintf(\"%d\\n\", strcmp(str1, str3));  \/\/ Returns -4 (the strings are not equal)\r\n"
            }
        }
    },
    "Python": {
        "Python Introduction": {
            "What is Python?": {
                "description": "What is Python?\r\nPython is a popular programming language. It was created by Guido van Rossum, and released in 1991.\r\n\r\nIt is used for:\r\n\r\nweb development (server-side),\r\nsoftware development,\r\nmathematics,\r\nsystem scripting.\r\nWhat can Python do?\r\nPython can be used on a server to create web applications.\r\nPython can be used alongside software to create workflows.\r\nPython can connect to database systems. It can also read and modify files.\r\nPython can be used to handle big data and perform complex mathematics.\r\nPython can be used for rapid prototyping, or for production-ready software development.\r\nWhy Python?\r\nPython works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).\r\nPython has a simple syntax similar to the English language.\r\nPython has syntax that allows developers to write programs with fewer lines than some other programming languages.\r\nPython runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.\r\nPython can be treated in a procedural way, an object-oriented way or a functional way.\r\nGood to know\r\nThe most recent major version of Python is Python 3, which we shall be using in this tutorial. However, Python 2, although not being updated with anything other than security updates, is still quite popular.\r\nIn this tutorial Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly useful when managing larger collections of Python files.\r\nPython Syntax compared to other programming languages\r\nPython was designed for readability, and has some similarities to the English language with influence from mathematics.\r\nPython uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.\r\nPython relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose."
            }
        }
    }
}